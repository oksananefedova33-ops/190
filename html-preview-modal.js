// /ui/html-preview/html-preview-modal.js

(function() {
  'use strict';

  class HtmlPreviewModal {
    constructor() {
      this.modal = null;
      this.textarea = null;
      this.iframe = null;
      this.iframeDoc = null;
      this.searchMatches = [];
      this.currentMatchIndex = -1;
    }

    open(initialHtml = '', onInsert = null, options = {}) {
      this.insertOptions = options;
      this.createModal();
      this.textarea.value = initialHtml;
      this.attachEventListeners(onInsert);
      this.refreshPreview();
    }

    createModal() {
      const back = document.createElement('div');
      back.className = 'html-preview-modal-back';

      const container = document.createElement('div');
      container.className = 'html-preview-modal-container';

      const header = document.createElement('div');
      header.className = 'html-preview-modal-header';
      header.innerHTML = `
        <h3>üîó HTML Preview</h3>
        <button class="close-btn" type="button">&times;</button>
      `;

      const content = document.createElement('div');
      content.className = 'html-preview-modal-content';

      const editorPanel = document.createElement('div');
      editorPanel.className = 'html-preview-editor-panel';
      
      // === –°—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞ ===
      const searchContainer = document.createElement('div');
      searchContainer.className = 'html-preview-search-container';
      searchContainer.innerHTML = `
        <div class="html-preview-search-wrapper">
          <input type="text" class="html-preview-search-input" placeholder="–ü–æ–∏—Å–∫ –≤ –∫–æ–¥–µ..." />
          <div class="html-preview-search-controls">
            <button class="html-preview-search-btn prev" type="button" title="–ü—Ä–µ–¥—ã–¥—É—â–µ–µ">‚Üë</button>
            <span class="html-preview-search-counter">0/0</span>
            <button class="html-preview-search-btn next" type="button" title="–°–ª–µ–¥—É—é—â–µ–µ">‚Üì</button>
            <button class="html-preview-search-btn clear" type="button" title="–û—á–∏—Å—Ç–∏—Ç—å">‚úï</button>
          </div>
        </div>
      `;
      
      const editorLabel = document.createElement('div');
      editorLabel.className = 'html-preview-editor-label';
      editorLabel.textContent = 'üìù HTML + CSS –∫–æ–¥';
      
      const textarea = document.createElement('textarea');
      textarea.className = 'html-preview-editor-textarea';
      textarea.spellcheck = false;
      textarea.placeholder = '–í—Å—Ç–∞–≤—å—Ç–µ HTML –∏ CSS –∑–¥–µ—Å—å...';
      
      // === –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ===
const toolbar = document.createElement('div');
toolbar.className = 'html-preview-toolbar';
toolbar.innerHTML = `
  <button class="html-preview-toolbar-btn" id="htmlPreviewImagesBtn" type="button">
    üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  </button>
  <button class="html-preview-toolbar-btn" id="htmlPreviewLangsBtn" type="button">
    üåê –Ø–∑—ã–∫–∏
  </button>
`;
      
      editorPanel.appendChild(searchContainer);
      editorPanel.appendChild(toolbar);
      editorPanel.appendChild(editorLabel);
      editorPanel.appendChild(textarea);


      const previewPanel = document.createElement('div');
      previewPanel.className = 'html-preview-preview-panel';
      previewPanel.innerHTML = `
        <div class="html-preview-preview-label">üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä</div>
        <div class="html-preview-iframe-container">
          <iframe class="html-preview-iframe" sandbox="allow-scripts allow-same-origin"></iframe>
        </div>
      `;

      content.appendChild(editorPanel);
      content.appendChild(previewPanel);

      const footer = document.createElement('div');
      footer.className = 'html-preview-modal-footer';
      footer.innerHTML = `
        <button class="html-preview-btn danger" type="button">‚ùå –û—Ç–º–µ–Ω–∞</button>
        <button class="html-preview-btn primary" type="button">‚úÖ –í—Å—Ç–∞–≤–∏—Ç—å –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä</button>
      `;

      container.appendChild(header);
      container.appendChild(content);
      container.appendChild(footer);
      back.appendChild(container);
      document.body.appendChild(back);

      this.modal = back;
      this.textarea = editorPanel.querySelector('textarea');
      this.iframe = previewPanel.querySelector('iframe');
      this.iframeDoc = this.iframe.contentDocument || this.iframe.contentWindow.document;
      
      // === –≠–ª–µ–º–µ–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ ===
      this.searchInput = editorPanel.querySelector('.html-preview-search-input');
      this.searchCounter = editorPanel.querySelector('.html-preview-search-counter');
      this.searchBtnPrev = editorPanel.querySelector('.html-preview-search-btn.prev');
      this.searchBtnNext = editorPanel.querySelector('.html-preview-search-btn.next');
      this.searchBtnClear = editorPanel.querySelector('.html-preview-search-btn.clear');
      
      console.log('Search elements:', {
        input: this.searchInput,
        counter: this.searchCounter,
        prev: this.searchBtnPrev,
        next: this.searchBtnNext,
        clear: this.searchBtnClear
      });

      back.addEventListener('click', (e) => {
        if (e.target === back) this.close();
      });

      header.querySelector('.close-btn').addEventListener('click', () => this.close());
      footer.querySelector('.html-preview-btn.danger').addEventListener('click', () => this.close());
      this.textarea.addEventListener('input', () => this.refreshPreview());
      
   // === –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞ ===
      this.setupSearchHandlers();
      
       // === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" ===
      const imagesBtn = document.getElementById('htmlPreviewImagesBtn');
      if (imagesBtn) {
        imagesBtn.addEventListener('click', () => {
          if (window.HtmlPreviewImagesManager) {
            const manager = new window.HtmlPreviewImagesManager();
            manager.open((imageCode) => {
              // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ textarea
              const cursorPos = this.textarea.selectionStart;
              const textBefore = this.textarea.value.substring(0, cursorPos);
              const textAfter = this.textarea.value.substring(cursorPos);
              this.textarea.value = textBefore + imageCode + textAfter;
              
              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
              this.textarea.selectionStart = this.textarea.selectionEnd = cursorPos + imageCode.length;
              this.textarea.focus();
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
              this.refreshPreview();
            });
          } else {
            console.error('HtmlPreviewImagesManager not loaded');
          }
        });
      }
      
      // === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–Ø–∑—ã–∫–∏" === (–î–û–ë–ê–í–ò–¢–¨ –ó–î–ï–°–¨, –° –¢–ï–ú –ñ–ï –û–¢–°–¢–£–ü–û–ú)
      const langsBtn = document.getElementById('htmlPreviewLangsBtn');
      if (langsBtn) {
        langsBtn.addEventListener('click', () => {
          if (window.HtmlLangBadgeGenerator) {
            const generator = new window.HtmlLangBadgeGenerator();
            generator.open((langHtml) => {
              // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML –≤ textarea
              const cursorPos = this.textarea.selectionStart;
              const textBefore = this.textarea.value.substring(0, cursorPos);
              const textAfter = this.textarea.value.substring(cursorPos);
              this.textarea.value = textBefore + '\n\n' + langHtml + '\n\n' + textAfter;
              
              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
              this.textarea.selectionStart = this.textarea.selectionEnd = cursorPos + langHtml.length + 4;
              this.textarea.focus();
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
              this.refreshPreview();
            });
          } else {
            console.error('HtmlLangBadgeGenerator not loaded');
          }
        });
      }
    }  
           

    // === –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ ===
    setupSearchHandlers() {
      const self = this;
      
      this.searchInput.addEventListener('input', function() {
        self.performSearch();
      });
      
      this.searchBtnNext.addEventListener('click', function() {
        self.goToNextMatch();
      });
      
      this.searchBtnPrev.addEventListener('click', function() {
        self.goToPrevMatch();
      });
      
      this.searchBtnClear.addEventListener('click', function() {
        self.clearSearch();
      });
      
      this.searchInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
          e.preventDefault();
          e.shiftKey ? self.goToPrevMatch() : self.goToNextMatch();
        }
      });
    }

    performSearch() {
      const searchTerm = this.searchInput.value.trim();
      this.searchMatches = [];
      this.currentMatchIndex = -1;

      if (!searchTerm) {
        this.updateSearchCounter();
        return;
      }

      const text = this.textarea.value;
      
      // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –±–µ–∑ regex
      let startIndex = 0;
      while (true) {
        const index = text.indexOf(searchTerm, startIndex);
        if (index === -1) break;
        
        this.searchMatches.push({
          start: index,
          end: index + searchTerm.length,
          text: searchTerm
        });
        
        startIndex = index + 1;
      }

      console.log('Found matches:', this.searchMatches.length, this.searchMatches);

      if (this.searchMatches.length > 0) {
        this.goToFirstMatch();
      }

      this.updateSearchCounter();
    }

    goToFirstMatch() {
      if (this.searchMatches.length === 0) return;
      this.currentMatchIndex = 0;
      this.highlightMatch(0);
    }

    goToNextMatch() {
      if (this.searchMatches.length === 0) return;
      this.currentMatchIndex = (this.currentMatchIndex + 1) % this.searchMatches.length;
      this.highlightMatch(this.currentMatchIndex);
    }

    goToPrevMatch() {
      if (this.searchMatches.length === 0) return;
      this.currentMatchIndex = (this.currentMatchIndex - 1 + this.searchMatches.length) % this.searchMatches.length;
      this.highlightMatch(this.currentMatchIndex);
    }

    highlightMatch(index) {
      if (!this.searchMatches[index]) return;

      const match = this.searchMatches[index];
      
      // –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ textarea
      this.textarea.setSelectionRange(match.start, match.end);
      this.textarea.focus();

      // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
      this.scrollToMatch(match.start);

      this.updateSearchCounter();
    }

    scrollToMatch(position) {
      const text = this.textarea.value;
      const textBeforeMatch = text.substring(0, position);
      const lineNumber = textBeforeMatch.split('\n').length - 1;
      
      // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫–∏
      const lineHeight = parseInt(window.getComputedStyle(this.textarea).lineHeight);
      const scrollPosition = lineNumber * lineHeight - lineHeight * 3; // 3 —Å—Ç—Ä–æ–∫–∏ —Å–≤–µ—Ä—Ö—É –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      
      // –ü–ª–∞–≤–Ω–æ–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–Ω–∏–µ
      this.textarea.scrollTop = Math.max(0, scrollPosition);
    }

    updateSearchCounter() {
      if (this.searchMatches.length === 0) {
        this.searchCounter.textContent = '0/0';
        this.searchCounter.className = '';
      } else {
        this.searchCounter.textContent = `${this.currentMatchIndex + 1}/${this.searchMatches.length}`;
        this.searchCounter.className = 'found';
      }
    }

    removeHighlights() {
      this.textarea.setSelectionRange(0, 0);
    }

    clearSearch() {
      this.searchInput.value = '';
      this.searchMatches = [];
      this.currentMatchIndex = -1;
      this.removeHighlights();
      this.updateSearchCounter();
      this.textarea.focus();
    }

    refreshPreview() {
      const rawHtml = this.textarea.value.trim();
      
      if (!rawHtml) {
        this.iframeDoc.open();
        this.iframeDoc.write('<p style="color:#999;padding:20px;">–í–≤–µ–¥–∏—Ç–µ HTML –∫–æ–¥...</p>');
        this.iframeDoc.close();
        return;
      }

      try {
        // –ó–∞–º–µ–Ω—è–µ–º position: fixed –∏ sticky –Ω–∞ absolute/relative –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ iframe
        let processedHtml = rawHtml;
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω-—Å—Ç–∏–ª–∏ –≤ —Ç–µ–≥–∞—Ö
        processedHtml = processedHtml.replace(/(<[^>]+style=["'][^"']*)(position\s*:\s*fixed)([^"']*["'][^>]*>)/gi, '$1position: absolute$3');
        processedHtml = processedHtml.replace(/(<[^>]+style=["'][^"']*)(position\s*:\s*sticky)([^"']*["'][^>]*>)/gi, '$1position: relative$3');
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏ –≤–Ω—É—Ç—Ä–∏ <style> —Ç–µ–≥–æ–≤
        processedHtml = processedHtml.replace(/(<style[^>]*>)([\s\S]*?)(<\/style>)/gi, function(match, opening, css, closing) {
          let fixedCss = css.replace(/position\s*:\s*fixed\s*;?/gi, 'position: absolute;');
          fixedCss = fixedCss.replace(/position\s*:\s*sticky\s*;?/gi, 'position: relative;');
          return opening + fixedCss + closing;
        });
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–æ–Ω –∏–∑ body/html –µ—Å–ª–∏ –µ—Å—Ç—å
        let bodyBg = '';
        const bodyStyleMatch = processedHtml.match(/<body[^>]+style=["']([^"']*background[^"']*)["']/i);
        if (bodyStyleMatch) {
          const bgMatch = bodyStyleMatch[1].match(/background[^;]*(:[^;]+)/i);
          if (bgMatch) bodyBg = bgMatch[0];
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∏–ª–∏ –≤ <style> –¥–ª—è body
        const styleMatch = processedHtml.match(/<style[^>]*>([\s\S]*?)<\/style>/i);
        if (styleMatch && !bodyBg) {
          const bodyRuleMatch = styleMatch[1].match(/body\s*\{([^}]*background[^}]*)\}/i);
          if (bodyRuleMatch) {
            const bgMatch = bodyRuleMatch[1].match(/background[^;]*(:[^;]+)/i);
            if (bgMatch) bodyBg = bgMatch[0];
          }
        }
        
        const fullHtml = `
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
              * { margin: 0; padding: 0; box-sizing: border-box; }
              html, body { ${bodyBg} }
            </style>
          </head>
          <body>
            ${processedHtml}
          </body>
          </html>
        `;
        
        this.iframeDoc.open();
        this.iframeDoc.write(fullHtml);
        this.iframeDoc.close();
      } catch (e) {
        this.showError('–û—à–∏–±–∫–∞: ' + e.message);
      }
    }

    showError(message) {
      console.error(message);
      this.iframeDoc.open();
      this.iframeDoc.write(`
        <div style="color:#ef4444;padding:20px;font-family:monospace;">
          ‚ö†Ô∏è ${message}
        </div>
      `);
      this.iframeDoc.close();
    }

    close() {
      if (this.modal && this.modal.parentNode) {
        this.modal.parentNode.removeChild(this.modal);
      }
      this.modal = null;
      this.textarea = null;
      this.iframe = null;
    }

    getFinalHtml() {
      return this.textarea.value.trim();
    }

    wrapHtmlSafely(rawHtml) {
      const iframeId = 'html-preview-' + Math.random().toString(36).slice(2, 9);
      
      return `
        <div data-html-preview-container="${iframeId}" style="width:100%;height:100%;overflow:auto;">
          <iframe 
            id="${iframeId}"
            data-html-preview-iframe="true"
            style="width:100%;height:100%;border:none;display:block;"
            sandbox="allow-scripts allow-same-origin"
            srcdoc="${this.escapeHtml(`
              <!DOCTYPE html>
              <html>
              <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1">
                <style>
                  * { margin: 0; padding: 0; box-sizing: border-box; }
                  body { background: #fff; font-family: system-ui, sans-serif; }
                </style>
              </head>
              <body>
                ${rawHtml}
              </body>
              </html>
            `)}"
          ></iframe>
        </div>
      `;
    }

    escapeHtml(text) {
      const map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;'
      };
      return text.replace(/[&<>"']/g, m => map[m]);
    }
    cleanHtmlForEditing(html) {
      let cleaned = html;
      
      // –£–¥–∞–ª—è–µ–º DOCTYPE
      cleaned = cleaned.replace(/<!DOCTYPE[^>]*>/gi, '');
      
      // –£–¥–∞–ª—è–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏ html
      cleaned = cleaned.replace(/<html[^>]*>/gi, '');
      cleaned = cleaned.replace(/<\/html>/gi, '');
      
      // –£–¥–∞–ª—è–µ–º –≤–µ—Å—å –±–ª–æ–∫ head —Å–æ –≤—Å–µ–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
      cleaned = cleaned.replace(/<head[^>]*>[\s\S]*?<\/head>/gi, '');
      
      // –£–¥–∞–ª—è–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏ body
      cleaned = cleaned.replace(/<body[^>]*>/gi, '');
      cleaned = cleaned.replace(/<\/body>/gi, '');
      
      // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
      cleaned = cleaned.trim();
      
      return cleaned;
    }

    extractAndIsolateStyles(html) {
      const scopeId = 'html-scope-' + Math.random().toString(36).slice(2, 9);
      let styles = '';
      let content = html;
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ <style> —Ç–µ–≥–∏
      const styleMatches = content.match(/<style[^>]*>([\s\S]*?)<\/style>/gi);
      if (styleMatches) {
        styleMatches.forEach(styleTag => {
          const cssContent = styleTag.replace(/<\/?style[^>]*>/gi, '');
          styles += this.scopeStyles(cssContent, scopeId) + '\n';
          // –£–¥–∞–ª—è–µ–º style —Ç–µ–≥ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
          content = content.replace(styleTag, '');
        });
      }
      
      // –ò—â–µ–º background –∏–∑ CSS –¥–ª—è body/html
      let bgStyle = '';
      if (styleMatches) {
        styleMatches.forEach(styleTag => {
          if (bgStyle) return;
          const cssContent = styleTag.replace(/<\/?style[^>]*>/gi, '');
          const bodyMatch = cssContent.match(/body\s*\{([^}]*)\}/);
          if (bodyMatch) {
            const bgMatch = bodyMatch[1].match(/background\s*:\s*([^;]+)/);
            if (bgMatch) bgStyle = bgMatch[1].trim();
          }
          if (!bgStyle) {
            const htmlMatch = cssContent.match(/html\s*\{([^}]*)\}/);
            if (htmlMatch) {
              const bgMatch = htmlMatch[1].match(/background\s*:\s*([^;]+)/);
              if (bgMatch) bgStyle = bgMatch[1].trim();
            }
          }
        });
      }
      
      // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ div —Å –∏–Ω–ª–∞–π–Ω —Ñ–æ–Ω–æ–º
      const inlineStyle = bgStyle ? ` style="background: ${bgStyle};"` : '';
      const wrappedContent = `<div id="${scopeId}" class="html-editable-wrapper"${inlineStyle}>${content}</div>`;
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∏–ª–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ <style> —Ç–µ–≥ —Å data-scope –∞—Ç—Ä–∏–±—É—Ç–æ–º
      const finalHtml = styles 
        ? `<style data-scope="${scopeId}">\n${styles}\n</style>\n${wrappedContent}`
        : wrappedContent;
      
      return {
        html: finalHtml,
        scopeId: scopeId
      };
    }
    
    wrapHtmlForEditing(rawHtml) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –∏–∑–æ–ª–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      const result = this.extractAndIsolateStyles(rawHtml);
      return result.html;
    }

    scopeStyles(cssText, scopeId) {
      try {
        let result = '';
        let buffer = '';
        let inAtRule = false;
        let braceCount = 0;
        
        for (let i = 0; i < cssText.length; i++) {
          const char = cssText[i];
          buffer += char;
          
          if (char === '{') {
            braceCount++;
            if (buffer.trim().startsWith('@')) {
              inAtRule = true;
            }
          } else if (char === '}') {
            braceCount--;
            
            if (braceCount === 0) {
              if (inAtRule) {
                // –î–ª—è @media, @keyframes –∏ —Ç.–¥. - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º scope –≤–Ω—É—Ç—Ä–∏
                const atRuleMatch = buffer.match(/^(\s*@[^{]+\{)([\s\S]*)(\}\s*)$/);
                if (atRuleMatch) {
                  const [, opening, content, closing] = atRuleMatch;
                  // –ï—Å–ª–∏ —ç—Ç–æ @keyframes - –Ω–µ —Å–∫–æ–ø–∏—Ä—É–µ–º, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                  if (opening.trim().toLowerCase().startsWith('@keyframes')) {
                    result += buffer;
                  } else {
                    result += opening + this.scopeStyles(content, scopeId) + closing;
                  }
                } else {
                  result += buffer;
                }
                inAtRule = false;
              } else {
                // –û–±—ã—á–Ω–æ–µ CSS –ø—Ä–∞–≤–∏–ª–æ
                const ruleMatch = buffer.match(/^([^{]+)\{([^}]*)\}$/);
                if (ruleMatch) {
                  const [, selectorPart, declaration] = ruleMatch;
                  
                  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Å–µ–≤–¥–æ—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –ø—Å–µ–≤–¥–æ–∫–ª–∞—Å—Å–æ–≤
                  const selectors = selectorPart.split(',').map(s => {
                    s = s.trim();
                    
                    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è body - –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ —Å–∞–º–æ–º—É scopeId
                    if (s === 'body' || s.startsWith('body ') || s.startsWith('body:') || s.startsWith('body.') || s.startsWith('body#')) {
                      // –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ body - –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ #scopeId
                      if (s === 'body') {
                        return `#${scopeId}`;
                      }
                      // –ï—Å–ª–∏ body —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏ - –∑–∞–º–µ–Ω—è–µ–º body –Ω–∞ #scopeId
                      return s.replace(/^body/, `#${scopeId}`);
                    }
                    
                    // html —Ç–æ–∂–µ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ scopeId
                    if (s === 'html' || s.startsWith('html ') || s.startsWith('html:') || s.startsWith('html.') || s.startsWith('html#')) {
                      if (s === 'html') {
                        return `#${scopeId}`;
                      }
                      return s.replace(/^html/, `#${scopeId}`);
                    }
                    
                    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
                    if (s === '*') {
                      return `#${scopeId} *`;
                    }
                    
                    // –ü—Å–µ–≤–¥–æ–∫–ª–∞—Å—Å—ã :root –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ scopeId
                    if (s === ':root' || s.startsWith(':root ')) {
                      return s.replace(/^:root/, `#${scopeId}`);
                    }
                    
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ —Å ::before, ::after, :hover –∏ –¥—Ä—É–≥–∏–º–∏ –ø—Å–µ–≤–¥–æ
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ scopeId –≤ –Ω–∞—á–∞–ª–µ
                    if (s.startsWith(`#${scopeId}`)) {
                      return s; // –£–∂–µ –µ—Å—Ç—å scope, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
                    }
                    
                    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º scope
                    return `#${scopeId} ${s}`;
                  }).join(', ');
                  
                  // –ó–∞–º–µ–Ω—è–µ–º position: fixed –∏ sticky –Ω–∞ absolute/relative –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏
                  let fixedDeclaration = declaration.replace(/position\s*:\s*fixed/gi, 'position: absolute');
                  fixedDeclaration = fixedDeclaration.replace(/position\s*:\s*sticky/gi, 'position: relative');
                  result += `${selectors} { ${fixedDeclaration} }\n`;
                } else {
                  result += buffer;
                }
              }
              buffer = '';
            }
          }
        }
        
        return result;
      } catch(e) {
        console.error('–û—à–∏–±–∫–∞ –∏–∑–æ–ª—è—Ü–∏–∏ —Å—Ç–∏–ª–µ–π:', e);
        return cssText;
      }
    }

    attachEventListeners(onInsert) {
      const insertBtn = this.modal.querySelector('.html-preview-btn.primary');
      
      insertBtn.addEventListener('click', () => {
        const finalHtml = this.getFinalHtml();
        
        if (!finalHtml) {
          alert('–ù–µ—á–µ–≥–æ –≤—Å—Ç–∞–≤–ª—è—Ç—å!');
          return;
        }

        if (onInsert && typeof onInsert === 'function') {
          const htmlToInsert = (this.insertOptions && this.insertOptions.wrapInIframe === false) 
            ? this.wrapHtmlForEditing(finalHtml)
            : this.wrapHtmlSafely(finalHtml);
          onInsert(htmlToInsert);
        }

        this.close();
      });
    }
  }

  window.HtmlPreviewModal = HtmlPreviewModal;
})();